spring:
    config:
        import: optional:file:.env[.properties]

    application:
        name: ${APP_NAME:rental-app}
    security:
        oauth2:
            client:
                registration:
                    cognito:
                        clientId: ${AWS_COGNITO_CLIENT_ID}
                        clientSecret: ${AWS_COGNITO_CLIENT_SECRET}
                        scope: openid
                        redirect-uri: ${AWS_COGNITO_REDIRECT_URI}
                        clientName: ${AWS_COGNITO_CLIENT_NAME}
                        authorization-grant-type: authorization_code
                provider:
                    cognito:
                        issuerUri: ${AWS_COGNITO_ISSUER_URI}
                        user-name-attribute: username

    
    redis:
        host: localhost
        port: 6379
    #        password: yourpassword  # Redis에 비밀번호가 설정되어 있다면 입력
    session:
        store-type: redis
        redis:
            flush-mode: immediate
            namespace: spring:session
        timeout: 1800 # 세션 만료 시간 (초 단위)

    datasource:
        url: ${JDBC_URL:jdbc:postgresql://localhost:5433/test}
        username: ${DB_USER:test}
        password: ${DB_PASSWORD:test}
        driver-class-name: org.postgresql.Driver
        hikari:
            maximum-pool-size: ${DB_MAX_POOL_SIZE:5} # keep it as small as possible for better performance.
            data-source-properties:
                ApplicationName: ${spring.application.name} # show application's name when using pg_stat_activity
                stringtype: unspecified
                reWriteBatchedInserts: true

    jpa:
        open-in-view: false
        hibernate:
            ddl-auto: validate
        properties:
            hibernate:
                jdbc.batch_size: 50
                order_inserts: true
                order_updates: true
        database-platform: org.hibernate.dialect.PostgreSQLDialect



    docker:
        compose:
            enabled: true
            lifecycle-management: start-only
server:
    servlet:
        session:
            cookie:
                name: JSESSIONID
    error:
        whitelabel:
            enabled: false # disable default whitelabel error page.
    shutdown: graceful

management:
    endpoints:
        web:
            exposure:
                include: "*"
    metrics:
        tags:
            application: ${spring.application.name}
        export:
            prometheus:
                enabled: true
    endpoint:
        prometheus:
            enabled: true
        show-details: always


cloud:
    aws:
        s3:
            bucket: ${S3_BUCKET}
        stack.auto: false
        region.static: ap-northeast-2
        credentials:
            accessKey: ${S3_ACCESS_KEY}
            secretKey: ${S3_SECRET_KEY}
logging:
    level:
        org.springframework.security: DEBUG